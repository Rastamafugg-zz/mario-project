/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("\"use strict\";\n\nimport Phaser from 'phaser';\n\n(function () {\n  const Physics = {\n    GRAVITY: 1400,\n    Mario: {\n      ACCELERATION: 10,\n      MIN_WALK: 60,\n      MAX_WALK: 120,\n      MIN_RUN: 100,\n      MAX_RUN: 200,\n      JUMP_TIME: 300,\n      MIN_JUMP: -250,\n      MAX_JUMP: -450\n    }\n  };\n  const Assets = {\n    TileMap: {\n      MAP: 'map1-1',\n      TILESET: 'overworld',\n      SECRET_MAP: 'map1-1-secret',\n      SECRET_TILESET: 'tiles'\n    },\n    SpriteSheets: {\n      MARIO_SMALL: 'marioSmall',\n      MARIO_BIG: 'marioBig'\n    }\n  };\n  const Item = {\n    NONE: 'none',\n    FLOWER: 'flower',\n    MUSHROOM: 'mushroom',\n    ONE_UP: \"1-Up\",\n    STAR: \"Star\",\n    BLOCK_COIN: \"block-coin\"\n  };\n  const Block = {\n    BLOCK: \"Block\",\n    BLOCK_PIECE: \"Block-Piece\",\n    ITEM_BLOCK: \"Item-Block\",\n    HIDDEN_BLOCK: \"Hidden-Block\",\n    ITEM_BLOCK_USED: \"Item-Block-Used\"\n  };\n  const BlockType = {\n    ONE_UP: \"1-Up\",\n    POWER_UP: \"Power-Up\",\n    COIN: \"Coin\",\n    MULTI_COIN: \"Multi-Coin\"\n  };\n  const Enemy = {\n    GOOMBA: \"Goomba\",\n    GREEN_KOOPA: \"Koopa\",\n    RED_KOOPA: \"red-koopa\",\n    FLY_KOOPA: \"fly-koopa\"\n  };\n  const Animation = {\n    Mario: {\n      WALK: \"walk\",\n      WAIT: \"wait\",\n      REVERSE: \"reverse\",\n      JUMP: \"jump\",\n      CROUCH: \"crouch\",\n      SHOOT: \"shoot\"\n    },\n    Level: {\n      BLOCK_PIECE: \"block-piece\",\n      FIREBALL: \"fireball\"\n    }\n  };\n  const Direction = {\n    UP: \"up\",\n    DOWN: \"down\",\n    LEFT: \"left\",\n    RIGHT: \"right\"\n  };\n  const MarioState = function (sprite, cursors, shootButton, runButton) {\n    let processLeftRight = function (newDirection) {\n      let onGround = sprite.body.onFloor() || sprite.body.touching.down;\n      let xVelocity = sprite.body.velocity.x;\n      let currentAnimation = sprite.animations.currentAnim.name;\n      let newAnimation = currentAnimation;\n      let directionMultiplier = newDirection === Direction.LEFT ? -1 : 1;\n      if (state.direction != newDirection) {\n        sprite.scale.x *= -1;\n        if (onGround) {\n          if (xVelocity !== 0) {\n            newAnimation = Animation.Mario.REVERSE;\n          } else {\n            newAnimation = Animation.Mario.WALK;\n          }\n        }\n      } else {\n        if (onGround) {\n          if (xVelocity < 0 && newDirection === Direction.RIGHT || xVelocity > 0 && newDirection === Direction.LEFT) {\n            newAnimation = Animation.Mario.REVERSE;\n            xVelocity += directionMultiplier * Physics.Mario.ACCELERATION;\n          } else {\n            newAnimation = Animation.Mario.WALK;\n            let accelerate = function (topSpeed) {\n              if (Math.abs(xVelocity) < topSpeed) {\n                xVelocity += directionMultiplier * Physics.Mario.ACCELERATION;\n              } else {\n                xVelocity = directionMultiplier * topSpeed;\n              }\n            };\n            if (runButton.isDown) {\n              accelerate(Physics.Mario.MAX_RUN);\n            } else {\n              accelerate(Physics.Mario.MAX_WALK);\n            }\n          }\n        } else {\n          let accelerate = function (topSpeed) {\n            if (Math.abs(xVelocity) < topSpeed) {\n              xVelocity += directionMultiplier * Physics.Mario.ACCELERATION;\n            } else {\n              xVelocity = directionMultiplier * topSpeed;\n            }\n          };\n          if (runButton.isDown) {\n            accelerate(Physics.Mario.MAX_RUN);\n          } else {\n            accelerate(Physics.Mario.MAX_WALK);\n          }\n        }\n      }\n      sprite.body.velocity.x = xVelocity;\n      state.direction = newDirection;\n      state.doNothing = false;\n      if (onGround && currentAnimation != newAnimation) {\n        sprite.animations.play(newAnimation);\n      }\n    };\n    let state = {\n      direction: Direction.RIGHT,\n      doNothing: true,\n      isDead: false,\n      isJumping: false,\n      stopJumping: true,\n      item: Item.NONE,\n      processControls: function () {\n        this.doNothing = true;\n        if (cursors.down.isDown) {\n          if (sprite.body.onFloor() || sprite.body.touching.down) {\n            if (this.item === Item.MUSHROOM || this.item === Item.FLOWER) {\n              sprite.animations.play(Animation.Mario.CROUCH);\n            } else {\n              sprite.animations.play(Animation.Mario.WAIT);\n            }\n            if (sprite.body.velocity.x > 0) {\n              sprite.body.velocity.x -= Physics.Mario.ACCELERATION;\n            } else if (sprite.body.velocity.x < 0) {\n              sprite.body.velocity.x += Physics.Mario.ACCELERATION;\n            }\n          }\n          this.doNothing = false;\n        } else if (cursors.left.isDown) {\n          processLeftRight(Direction.LEFT);\n        } else if (cursors.right.isDown) {\n          processLeftRight(Direction.RIGHT);\n        }\n        if (cursors.up.isDown) {\n          if (cursors.up.justDown && !this.isJumping) {\n            if (sprite.body.onFloor() || sprite.body.touching.down) {\n              // debugger\n              sprite.body.velocity.y = Physics.Mario.MIN_JUMP;\n              sprite.animations.play(Animation.Mario.JUMP);\n              game.time.events.add(Physics.Mario.JUMP_TIME, function () {\n                this.stopJumping = true;\n              }, this);\n              this.stopJumping = false;\n              this.isJumping = true;\n            }\n          } else {\n            if (this.stopJumping) {\n              sprite.body.gravity.y = 0;\n              if (this.isJumping) {\n                this.isJumping = false;\n              }\n            } else {\n              // debugger;\n              sprite.animations.play(Animation.Mario.JUMP);\n              sprite.body.gravity.y = Physics.GRAVITY * -1;\n            }\n          }\n        } else {\n          sprite.body.gravity.y = 0;\n          if (this.isJumping) {\n            this.isJumping = false;\n            if (!this.stopJumping) {\n              this.stopJumping = true;\n            }\n          }\n        }\n        if (shootButton.justDown && this.item === Item.FLOWER) {\n          sprite.animations.play(Animation.Mario.SHOOT);\n          this.doNothing = false;\n          let fireball = game.add.sprite(this.direction === Direction.RIGHT ? sprite.right : sprite.left - 8, sprite.top + sprite.body.halfHeight, Animation.Level.FIREBALL);\n          fireball.animations.add(Animation.Level.FIREBALL, [0, 1, 2, 3], 4, true);\n          fireball.animations.play(Animation.Level.FIREBALL);\n          fireball.autoCull = true;\n          fireball.outOfCameraBoundsKill = true;\n          game.physics.enable(fireball);\n          fireball.enableBody = true;\n          fireball.body.collideWorldBounds = true;\n          fireball.body.velocity.x = this.direction === Direction.RIGHT ? 200 : -200;\n          fireball.body.velocity.y = 0;\n          items.add(fireball);\n        }\n        if (this.doNothing) {\n          if (sprite.body.velocity.x > 10) {\n            sprite.body.velocity.x -= 10;\n          } else if (sprite.body.velocity.x < -10) {\n            sprite.body.velocity.x += 10;\n          } else {\n            sprite.body.velocity.x = 0;\n          }\n          if (sprite.body.onFloor() || sprite.body.touching.down) {\n            sprite.animations.play(Animation.Mario.WAIT);\n          }\n        }\n      }\n    };\n    return state;\n  };\n\n  let map;\n  let layer;\n  let blocks;\n  let items;\n  let enemies;\n  let gameObjects;\n\n  let mario;\n\n  const game = new Phaser.Game(512, 256, Phaser.AUTO, 'game', {\n    preload: preload,\n    create: create,\n    update: update,\n    render: render\n  });\n\n  function preload() {\n    game.load.tilemap(Assets.TileMap.MAP, `assets/${ Assets.TileMap.MAP }.json`, null, Phaser.Tilemap.TILED_JSON);\n    game.load.image(Assets.TileMap.TILESET, `assets/${ Assets.TileMap.TILESET }.png`);\n    game.load.tilemap(Assets.TileMap.SECRET_MAP, `assets/${ Assets.TileMap.SECRET_MAP }.json`, null, Phaser.Tilemap.TILED_JSON);\n    game.load.image(Assets.TileMap.SECRET_TILESET, `assets/${ Assets.TileMap.SECRET_TILESET }.png`);\n    game.load.image(Block.BLOCK, 'assets/sprites/block.png');\n    game.load.image(Block.HIDDEN_BLOCK, 'assets/sprites/hidden-block.png');\n    game.load.image(Block.ITEM_BLOCK_USED, 'assets/sprites/item-block-used.png');\n    game.load.image(Item.MUSHROOM, 'assets/sprites/mushroom.png');\n    game.load.image(Item.ONE_UP, 'assets/sprites/1-up.png');\n\n    game.load.spritesheet(Item.FLOWER, 'assets/sprites/flower.png', 16, 16);\n    game.load.spritesheet(Assets.SpriteSheets.MARIO_SMALL, 'assets/marioSmall.png', 16, 16);\n    game.load.spritesheet(Assets.SpriteSheets.MARIO_BIG, 'assets/marioBig.png', 16, 32);\n    game.load.spritesheet(Item.BLOCK_COIN, 'assets/sprites/coin-animation.png', 16, 16);\n    game.load.spritesheet(Block.BLOCK_PIECE, 'assets/sprites/block-piece.png', 8, 8);\n    game.load.spritesheet(Animation.Level.FIREBALL, 'assets/sprites/fireball.png', 8, 8);\n    game.load.spritesheet(Block.ITEM_BLOCK, 'assets/sprites/item-block.png', 16, 16);\n    game.load.spritesheet(Enemy.GOOMBA, 'assets/sprites/goomba.png', 16, 16);\n    game.load.spritesheet(Enemy.GREEN_KOOPA, 'assets/sprites/koopa.png', 16, 32);\n  }\n\n  function create() {\n    let x, y;\n\n    game.physics.startSystem(Phaser.Physics.ARCADE);\n    game.physics.arcade.gravity.y = Physics.GRAVITY;\n\n    game.stage.backgroundColor = '#5C94FC';\n    game.fpsProblemNotifier.add(function (param) {\n      console.log(\"fps:\" + param);\n    });\n\n    map = game.add.tilemap(Assets.TileMap.MAP);\n    map.addTilesetImage(Assets.TileMap.TILESET, Assets.TileMap.TILESET);\n    layer = map.createLayer('World 1-1');\n    layer.resizeWorld();\n    layer.wrap = true;\n    map.setCollision([1, 33, 65, 66, 97, 98]);\n\n    items = game.add.group();\n    enemies = game.add.group();\n\n    blocks = game.add.group();\n    blocks.enableBody = true;\n    map.createFromObjects(\"Blocks\", Block.BLOCK, Block.BLOCK, undefined, true, false, blocks);\n    map.createFromObjects(\"Item-Blocks\", Block.ITEM_BLOCK, Block.ITEM_BLOCK, undefined, true, false, blocks);\n    map.createFromObjects(\"Hidden-Blocks\", Block.HIDDEN_BLOCK, Block.HIDDEN_BLOCK, undefined, true, false, blocks);\n    for (x = 0; x < blocks.children.length; x++) {\n      let currentBlock = blocks.children[x];\n      currentBlock.body.immovable = true;\n      currentBlock.body.allowGravity = false;\n      currentBlock.body.setSize(12, 16, 2, 0);\n      if (currentBlock.key === Block.ITEM_BLOCK) {\n        currentBlock.animations.add(Block.ITEM_BLOCK, [0, 1, 2], 3, true);\n        currentBlock.animations.play(Block.ITEM_BLOCK);\n      }\n    }\n\n    let levelStart = map.objects[\"Game-Objects\"].find(current => current.name === \"Level-Start\");\n    mario = game.add.sprite(levelStart.x, levelStart.y, Assets.SpriteSheets.MARIO_SMALL);\n    // mario.anchor.x = 0.5;\n    // mario.anchor.y = 0.5;\n\n    game.physics.enable(mario);\n    mario.body.bounce.y = 0;\n    // mario.body.damping = 1;\n    mario.body.collideWorldBounds = true;\n\n    mario.animations.add(Animation.Mario.WALK, [1, 2, 3], 10, true);\n    mario.animations.add(Animation.Mario.WAIT, [0], 10, true);\n    mario.animations.add(Animation.Mario.REVERSE, [4], 10, true);\n    mario.animations.add(Animation.Mario.JUMP, [5], 10, true);\n    mario.animations.add(Animation.Mario.CROUCH, [6], 10, true);\n    mario.animations.add(Animation.Mario.SHOOT, [16], 10, true);\n    mario.body.onWorldBounds = new Phaser.Signal();\n    mario.body.onWorldBounds.add(function (sprite, up, down, left, right) {\n      if (down && !mario.state.isDead) {\n        game.camera.fade(0x000000, Phaser.Timer.Quarter, false);\n        mario.state.isDead = true;\n        mario.collideWorldBounds = false;\n        game.time.events.add(Phaser.Timer.HALF, function () {\n          game.camera.flash(0x000000, Phaser.Timer.Quarter, false);\n          let levelStart = map.objects[\"Game-Objects\"].find(current => current.name === \"Level-Start\");\n          mario.x = levelStart.x;\n          mario.y = levelStart.y;\n          mario.state.isDead = false;\n          mario.collideWorldBounds = true;\n        }, this);\n      }\n    });\n    mario.body.fixedRotation = true;\n\n    game.camera.follow(mario);\n    let cursors = game.input.keyboard.createCursorKeys();\n    let shootButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n    let runButton = game.input.keyboard.addKey(Phaser.Keyboard.SHIFT);\n\n    mario.state = MarioState(mario, cursors, shootButton, runButton);\n  }\n\n  function update() {\n    game.physics.arcade.collide(mario, layer, resolveCollision);\n    game.physics.arcade.collide(mario, blocks, resolveBlocksCollision);\n    game.physics.arcade.collide(mario, items, resolveItemsCollision);\n    game.physics.arcade.collide(items, layer);\n    game.physics.arcade.collide(items, blocks);\n    game.physics.arcade.collide(enemies, layer);\n    game.physics.arcade.collide(enemies, blocks);\n    game.physics.arcade.collide(mario, enemies, resolveEnemyCollision);\n    game.physics.arcade.collide(mario, gameObjects, resolveGameObjectCollision);\n    mario.state.processControls();\n\n    let secretEntrance = map.objects[\"Game-Objects\"].find(current => current.name === \"Secret-Zone-1-Enter\");\n    if (checkMarioOverlap(mario, secretEntrance)) {\n      resolveGameObjectCollision(mario, secretEntrance);\n    }\n\n    let enemySpawnPoints = map.objects[\"Enemy-Spawns\"];\n    for (let c = 0; c < enemySpawnPoints.length; c++) {\n      let currentSP = enemySpawnPoints[c];\n      if (checkCameraOverlap(currentSP)) {\n        if (!currentSP.hasSpawned) {\n          if (currentSP.name === Enemy.GOOMBA) {\n            currentSP.hasSpawned = true;\n            let goomba = game.add.sprite(currentSP.x, currentSP.y, Enemy.GOOMBA);\n            enemies.add(goomba);\n\n            game.physics.enable(goomba);\n            goomba.body.bounce.y = 0;\n            goomba.body.bounce.x = 1;\n            goomba.body.damping = 1;\n            goomba.body.collideWorldBounds = true;\n\n            goomba.animations.add('walk', [0, 1], 6, true);\n            goomba.play('walk');\n            goomba.body.velocity.x = -40;\n          } else if (currentSP.name === Enemy.GREEN_KOOPA) {\n            currentSP.hasSpawned = true;\n            let koopa = game.add.sprite(currentSP.x, currentSP.y - 16, Enemy.GREEN_KOOPA);\n            enemies.add(koopa);\n\n            game.physics.enable(koopa);\n            koopa.body.bounce.y = 0;\n            koopa.body.bounce.x = 1;\n            koopa.body.damping = 1;\n            koopa.body.collideWorldBounds = true;\n\n            koopa.animations.add('walk', [0, 1], 6, true);\n            koopa.animations.add('shell', [4], 6, true);\n            koopa.animations.add('waking', [4, 5], 12, true);\n            koopa.play('walk');\n            koopa.body.velocity.x = -40;\n          }\n        }\n      }\n    }\n\n    function checkMarioOverlap(mario, object) {\n      // debugger;\n      let marioBounds = new Phaser.Rectangle(mario.x, mario.y, mario.width, mario.height);\n      let objectBounds = new Phaser.Rectangle(object.x, object.y, object.width, object.height);\n      return Phaser.Rectangle.intersects(marioBounds, objectBounds);\n    }\n\n    function checkCameraOverlap(object) {\n      // debugger;\n      let bounds = new Phaser.Rectangle(object.x, object.y, object.width, object.height);\n      return Phaser.Rectangle.intersects(bounds, game.camera.view);\n    }\n  }\n\n  function render() {\n    // game.debug.bodyInfo(mario, 32, 32);\n    // game.debug.body(mario);\n  }\n\n  function resolveCollision(mario, object) {\n    if (object.index === 40) {\n      //ground\n    } else if (object.index === 21 || object.index === 22 || object.index === 27 || object.index === 28) {\n      //pipe\n    } else if (object.index === 16) {\n      //non-destructible block\n    } else if (object.index === 5 || object.index === 9 || object.index === 10 || object.index === 17) {\n      //level flag\n    } else {\n      if (mario.body.blocked.up) {\n        // debugger\n        // object.alpha = 0.2;\n        object.index = 41;\n        layer.dirty = true;\n      }\n    }\n  }\n\n  function resolveBlocksCollision(mario, block) {\n    let x;\n    let marioX = mario.body.position.x;\n    let marioY = mario.body.position.y;\n    let marioWidth = mario.body.width;\n    let targetBlock = block;\n    let collisionBlocks = [];\n\n    if (marioY === block.body.position.y + block.body.height) {\n      for (x = 0; x < blocks.children.length; x++) {\n        // debugger\n        if (blocks.children[x].body.position.y + blocks.children[x].body.height === marioY && blocks.children[x].body.position.x <= marioX + marioWidth && blocks.children[x].body.position.x + blocks.children[x].body.width >= marioX) {\n          collisionBlocks.push(blocks.children[x]);\n        }\n      }\n\n      if (collisionBlocks.length === 1) {\n        targetBlock = collisionBlocks[0];\n      } else {\n        for (x = 0; x < collisionBlocks.length; x++) {\n          if (collisionBlocks[x].body.position.x <= marioX + marioWidth / 2 && collisionBlocks[x].body.position.x + collisionBlocks[x].body.width >= marioX + marioWidth / 2) {\n            targetBlock = collisionBlocks[x];\n          }\n        }\n      }\n\n      if (targetBlock.key === Block.ITEM_BLOCK_USED) {\n        //Used Blocks are treated as non-movable\n        return;\n      }\n      //Bounce hit block sprite in response to being hit\n      let initialY = block.y;\n      let bounce = game.add.tween(targetBlock);\n      bounce.to({ y: initialY - 5 }, 100);\n      let bounceReturn = game.add.tween(targetBlock);\n      bounceReturn.to({ y: initialY }, 100);\n      bounce.chain(bounceReturn);\n      bounce.start();\n\n      if (targetBlock.key === Block.ITEM_BLOCK || targetBlock.key === Block.HIDDEN_BLOCK) {\n        targetBlock.loadTexture(Block.ITEM_BLOCK_USED);\n      }\n      // Destroy non-multi-coin blocks\n      if (targetBlock.key === Block.BLOCK && targetBlock.contents !== BlockType.MULTI_COIN && (mario.state.item === Item.MUSHROOM || mario.state.item === Item.FLOWER)) {\n        let createBlockPiece = function (x, y, velocityX, velocityY) {\n          let blockPiece = game.add.sprite(x, y, Block.BLOCK_PIECE);\n          blockPiece.animations.add(Item.BLOCK_PIECE, [0, 1], 4, true);\n          blockPiece.animations.play(Item.BLOCK_PIECE);\n          blockPiece.autoCull = true;\n          blockPiece.outOfCameraBoundsKill = true;\n\n          game.physics.enable(blockPiece);\n          blockPiece.enableBody = true;\n          blockPiece.body.velocity.x = velocityX;\n          blockPiece.body.velocity.y = velocityY;\n        };\n        createBlockPiece(targetBlock.x, targetBlock.y, -100, -100);\n        createBlockPiece(targetBlock.x + 8, targetBlock.y, 100, -100);\n        createBlockPiece(targetBlock.x, targetBlock.y + 8, -100, 0);\n        createBlockPiece(targetBlock.x + 8, targetBlock.y + 8, 100, 0);\n\n        blocks.remove(targetBlock);\n        targetBlock.kill();\n      } else if (targetBlock.contents === BlockType.MULTI_COIN) {\n        if (!targetBlock.blockActivated) {\n          game.time.events.add(Phaser.Timer.SECOND * 6, function () {\n            targetBlock.loadTexture(Block.ITEM_BLOCK_USED);\n          }, this);\n          targetBlock.blockActivated = true;\n        }\n        let startX = targetBlock.x,\n            startY = targetBlock.y - 16;\n        let blockCoin = game.add.sprite(startX, startY, Item.BLOCK_COIN);\n        blockCoin.animations.add(Item.BLOCK_COIN, [0, 1, 2, 3], 10, true);\n        blockCoin.animations.play(Item.BLOCK_COIN);\n        let bounce = game.add.tween(blockCoin);\n        bounce.to({ y: startY - 32 }, 200);\n        let bounceReturn = game.add.tween(blockCoin);\n        bounceReturn.to({ y: startY }, 200);\n        bounce.chain(bounceReturn);\n        bounceReturn.onComplete.add(function () {\n          blockCoin.kill();\n        }, this);\n        bounce.start();\n      }\n      if (targetBlock.contents === BlockType.POWER_UP) {\n        if (mario.key === Assets.SpriteSheets.MARIO_SMALL) {\n          let mushroom = game.add.sprite(targetBlock.x, targetBlock.y, Item.MUSHROOM);\n          let group = game.add.group();\n          group.add(mushroom);\n          group.add(targetBlock);\n          let spawn = game.add.tween(mushroom);\n          spawn.to({ y: initialY - 16 }, 1000);\n          spawn.onComplete.add(function () {\n            group.remove(mushroom);\n            group.remove(targetBlock);\n            blocks.add(targetBlock);\n            game.physics.enable(mushroom);\n            items.add(mushroom);\n            mushroom.enableBody = true;\n            mushroom.body.bounce.y = 0;\n            mushroom.body.bounce.x = 1;\n            mushroom.body.damping = 1;\n            mushroom.body.collideWorldBounds = true;\n            mushroom.body.velocity.x = 60;\n          }, this);\n          spawn.start();\n        } else {\n          let flower = game.add.sprite(targetBlock.x, targetBlock.y, Item.FLOWER);\n          flower.animations.add(Item.FLOWER, [0, 1, 2, 3], 10, true);\n          flower.animations.play(Item.FLOWER);\n          let group = game.add.group();\n          group.add(flower);\n          group.add(targetBlock);\n          let spawn = game.add.tween(flower);\n          spawn.to({ y: initialY - 16 }, 1000);\n          spawn.onComplete.add(function () {\n            game.physics.enable(flower);\n            group.remove(flower);\n            group.remove(targetBlock);\n            blocks.add(targetBlock);\n            items.add(flower);\n            flower.enableBody = true;\n            flower.body.bounce.y = 0;\n            flower.body.bounce.x = 1;\n            flower.body.damping = 1;\n            flower.body.collideWorldBounds = true;\n            flower.body.velocity.x = 0;\n            // for (x = 0; x < blocks.children.length; x++) {\n            //   // debugger\n            //   if (blocks.children[x].body.position.y + blocks.children[x].body.height === marioY\n            //       && blocks.children[x].body.position.x <= marioX + marioWidth\n            //       && blocks.children[x].body.position.x + blocks.children[x].body.width >= marioX) {\n            //     collisionBlocks.push(blocks.children[x]);\n            //   }\n            // }\n          }, this);\n          spawn.start();\n        }\n      } else if (targetBlock.contents === BlockType.ONE_UP) {\n        let mushroom = game.add.sprite(targetBlock.x, targetBlock.y, Item.ONE_UP);\n        let group = game.add.group();\n        group.add(mushroom);\n        group.add(targetBlock);\n        let spawn = game.add.tween(mushroom);\n        spawn.to({ y: initialY - 16 }, 1000);\n        spawn.onComplete.add(function () {\n          group.remove(mushroom);\n          group.remove(targetBlock);\n          blocks.add(targetBlock);\n          game.physics.enable(mushroom);\n          items.add(mushroom);\n          mushroom.enableBody = true;\n          mushroom.body.bounce.y = 0;\n          mushroom.body.bounce.x = 1;\n          mushroom.body.damping = 1;\n          mushroom.body.collideWorldBounds = true;\n          mushroom.body.velocity.x = 60;\n        }, this);\n        spawn.start();\n      } else if (targetBlock.contents === BlockType.COIN) {\n        let startX = targetBlock.x,\n            startY = targetBlock.y - 16;\n        let blockCoin = game.add.sprite(startX, startY, Item.BLOCK_COIN);\n        blockCoin.animations.add(Item.BLOCK_COIN, [0, 1, 2, 3], 10, true);\n        blockCoin.animations.play(Item.BLOCK_COIN);\n        let bounce = game.add.tween(blockCoin);\n        bounce.to({ y: startY - 32 }, 200);\n        let bounceReturn = game.add.tween(blockCoin);\n        bounceReturn.to({ y: startY }, 200);\n        bounce.chain(bounceReturn);\n        bounceReturn.onComplete.add(function () {\n          blockCoin.kill();\n        }, this);\n        bounce.start();\n      }\n    }\n  }\n\n  function generateFrameData(frames, offset) {\n    let index,\n        x,\n        y = 32 * offset,\n        width = 16,\n        height = 32,\n        name = \"\";\n    let frameData = new Phaser.FrameData();\n    for (let a = 0; a < frames.length; a++) {\n      index = frames[a];\n      x = index * 16;\n      frameData.addFrame(new Phaser.Frame(index + offset * 21, x, y, width, height, name));\n    }\n    return frameData;\n  }\n\n  function resolveItemsCollision(mario, item) {\n    if (item.key === Item.MUSHROOM) {\n      if (mario.key === Assets.SpriteSheets.MARIO_SMALL) {\n        mario.loadTexture(Assets.SpriteSheets.MARIO_BIG);\n        mario.body.setSize(16, 32);\n        mario.state.item = Item.MUSHROOM;\n      }\n    } else if (item.key === Item.FLOWER) {\n      if (mario.key === Assets.SpriteSheets.MARIO_SMALL) {\n        mario.loadTexture(Assets.SpriteSheets.MARIO_BIG);\n        mario.body.setSize(16, 32);\n        mario.state.item = Item.MUSHROOM;\n      } else {\n        let frameData = generateFrameData([1, 2, 3], 2);\n        let animation = mario.animations.getAnimation(Animation.Mario.WALK);\n        animation.updateFrameData(frameData);\n\n        frameData = generateFrameData([0], 2);\n        animation = mario.animations.getAnimation(Animation.Mario.WAIT);\n        animation.updateFrameData(frameData);\n\n        frameData = generateFrameData([4], 2);\n        animation = mario.animations.getAnimation(Animation.Mario.REVERSE);\n        animation.updateFrameData(frameData);\n\n        frameData = generateFrameData([5], 2);\n        animation = mario.animations.getAnimation(Animation.Mario.JUMP);\n        animation.updateFrameData(frameData);\n\n        frameData = generateFrameData([6], 2);\n        animation = mario.animations.getAnimation(Animation.Mario.CROUCH);\n        animation.updateFrameData(frameData);\n\n        frameData = generateFrameData([16], 2);\n        animation = mario.animations.getAnimation(Animation.Mario.SHOOT);\n        animation.updateFrameData(frameData);\n\n        mario.state.item = Item.FLOWER;\n      }\n    }\n    item.kill();\n    items.remove(item);\n  }\n\n  function resolveEnemyCollision(mario, enemy) {\n    if (enemy.body.position.y === mario.body.position.y + mario.body.height) {\n      if (enemy.key === Enemy.GOOMBA) {\n        mario.body.velocity.y = -150;\n        enemy.body.enable = false;\n        //Kill goomba\n        var anim = enemy.animations.add('die', [2], 6, false);\n        anim.onComplete.add(function () {\n          enemies.remove(enemy);\n          enemy.kill();\n        }, this);\n\n        anim.play();\n      } else if (enemy.key === Enemy.GREEN_KOOPA) {\n        mario.body.velocity.y = -150;\n        if (enemy.animations.currentAnim.name === \"walk\") {\n          enemy.body.velocity.x = 0;\n          // enemy.body.y -= 16;\n          // enemy.body.setSize(16, 16);\n          enemy.animations.play(\"shell\");\n        } else if (enemy.animations.currentAnim.name === \"shell\") {\n          if (enemy.body.velocity.x != 0) {\n            enemy.body.velocity.x = 0;\n          } else if (mario.x + mario.width / 2 > enemy.x + enemy.width / 2) {\n            enemy.body.velocity.x = 200;\n          } else {\n            enemy.body.velocity.x = -200;\n          }\n        }\n      } else if (enemy.key === Enemy.RED_KOOPA) {\n        //Kill red koopa\n        enemy.kill();\n      } else if (enemy.key === Enemy.FLY_KOOPA) {\n        //Kill flying koopa\n        // squish.play();\n        enemy.kill();\n      }\n    } else {\n      game.camera.fade(0x000000, Phaser.Timer.Quarter, false);\n      mario.state.isDead = true;\n      mario.collideWorldBounds = false;\n      game.time.events.add(Phaser.Timer.HALF, function () {\n        game.camera.flash(0x000000, Phaser.Timer.Quarter, false);\n        let levelStart = map.objects[\"Game-Objects\"].find(current => current.name === \"Level-Start\");\n        mario.x = levelStart.x;\n        mario.y = levelStart.y;\n        mario.state.isDead = false;\n        mario.collideWorldBounds = true;\n      }, this);\n    }\n  }\n\n  function resolveGameObjectCollision(mario, gameObject) {\n    if (mario.y + mario.height === gameObject.y) {\n      if (mario.x > gameObject.x && mario.x + mario.width < gameObject.x + gameObject.width) {\n        if (cursors.down.isDown) {\n          debugger;\n        }\n      }\n    }\n  }\n})();//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);